// Code generated by MockGen. DO NOT EDIT.
// Source: internal/romanNumeral/usecase.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	models "github.com/GabrielFreitasP/smallest-roman-numeral/internal/models"
	gomock "github.com/golang/mock/gomock"
)

// MockUseCase is a mock of UseCase interface.
type MockUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockUseCaseMockRecorder
}

// MockUseCaseMockRecorder is the mock recorder for MockUseCase.
type MockUseCaseMockRecorder struct {
	mock *MockUseCase
}

// NewMockUseCase creates a new mock instance.
func NewMockUseCase(ctrl *gomock.Controller) *MockUseCase {
	mock := &MockUseCase{ctrl: ctrl}
	mock.recorder = &MockUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUseCase) EXPECT() *MockUseCaseMockRecorder {
	return m.recorder
}

// Search mocks base method.
func (m *MockUseCase) Search(ctx context.Context, romanNumeralSearch *models.RomanNumeralSearch) (*models.RomanNumeral, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Search", ctx, romanNumeralSearch)
	ret0, _ := ret[0].(*models.RomanNumeral)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Search indicates an expected call of Search.
func (mr *MockUseCaseMockRecorder) Search(ctx, romanNumeralSearch interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Search", reflect.TypeOf((*MockUseCase)(nil).Search), ctx, romanNumeralSearch)
}
